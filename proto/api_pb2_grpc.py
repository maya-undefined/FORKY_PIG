# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

#import api_pb2 as api__pb2
from . import api_pb2 as api__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class ControllerAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePool = channel.unary_unary(
                '/devbox.ControllerAPI/CreatePool',
                request_serializer=api__pb2.CreatePoolReq.SerializeToString,
                response_deserializer=api__pb2.CreatePoolResp.FromString,
                _registered_method=True)
        self.ListPools = channel.unary_unary(
                '/devbox.ControllerAPI/ListPools',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.ListPoolsResp.FromString,
                _registered_method=True)
        self.ListPoolHosts = channel.unary_unary(
                '/devbox.ControllerAPI/ListPoolHosts',
                request_serializer=api__pb2.ListPoolsHostsReq.SerializeToString,
                response_deserializer=api__pb2.ListPoolsHostsResp.FromString,
                _registered_method=True)
        self.EnsureWarmPool = channel.unary_unary(
                '/devbox.ControllerAPI/EnsureWarmPool',
                request_serializer=api__pb2.EnsureWarmPoolReq.SerializeToString,
                response_deserializer=api__pb2.EnsureWarmPoolResp.FromString,
                _registered_method=True)
        self.Acquire = channel.unary_unary(
                '/devbox.ControllerAPI/Acquire',
                request_serializer=api__pb2.AcquireReq.SerializeToString,
                response_deserializer=api__pb2.AcquireResp.FromString,
                _registered_method=True)
        self.Release = channel.unary_unary(
                '/devbox.ControllerAPI/Release',
                request_serializer=api__pb2.ReleaseReq.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                _registered_method=True)
        self.Exec = channel.unary_unary(
                '/devbox.ControllerAPI/Exec',
                request_serializer=api__pb2.ExecReq.SerializeToString,
                response_deserializer=api__pb2.ExecResp.FromString,
                _registered_method=True)
        self.Health = channel.unary_unary(
                '/devbox.ControllerAPI/Health',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.HealthResp.FromString,
                _registered_method=True)
        self.Fork = channel.unary_unary(
                '/devbox.ControllerAPI/Fork',
                request_serializer=api__pb2.ForkReq.SerializeToString,
                response_deserializer=api__pb2.ForkResp.FromString,
                _registered_method=True)


class ControllerAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPools(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPoolHosts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnsureWarmPool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Acquire(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Release(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fork(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControllerAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePool': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePool,
                    request_deserializer=api__pb2.CreatePoolReq.FromString,
                    response_serializer=api__pb2.CreatePoolResp.SerializeToString,
            ),
            'ListPools': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPools,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.ListPoolsResp.SerializeToString,
            ),
            'ListPoolHosts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPoolHosts,
                    request_deserializer=api__pb2.ListPoolsHostsReq.FromString,
                    response_serializer=api__pb2.ListPoolsHostsResp.SerializeToString,
            ),
            'EnsureWarmPool': grpc.unary_unary_rpc_method_handler(
                    servicer.EnsureWarmPool,
                    request_deserializer=api__pb2.EnsureWarmPoolReq.FromString,
                    response_serializer=api__pb2.EnsureWarmPoolResp.SerializeToString,
            ),
            'Acquire': grpc.unary_unary_rpc_method_handler(
                    servicer.Acquire,
                    request_deserializer=api__pb2.AcquireReq.FromString,
                    response_serializer=api__pb2.AcquireResp.SerializeToString,
            ),
            'Release': grpc.unary_unary_rpc_method_handler(
                    servicer.Release,
                    request_deserializer=api__pb2.ReleaseReq.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'Exec': grpc.unary_unary_rpc_method_handler(
                    servicer.Exec,
                    request_deserializer=api__pb2.ExecReq.FromString,
                    response_serializer=api__pb2.ExecResp.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.HealthResp.SerializeToString,
            ),
            'Fork': grpc.unary_unary_rpc_method_handler(
                    servicer.Fork,
                    request_deserializer=api__pb2.ForkReq.FromString,
                    response_serializer=api__pb2.ForkResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'devbox.ControllerAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('devbox.ControllerAPI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ControllerAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.ControllerAPI/CreatePool',
            api__pb2.CreatePoolReq.SerializeToString,
            api__pb2.CreatePoolResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPools(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.ControllerAPI/ListPools',
            api__pb2.Empty.SerializeToString,
            api__pb2.ListPoolsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPoolHosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.ControllerAPI/ListPoolHosts',
            api__pb2.ListPoolsHostsReq.SerializeToString,
            api__pb2.ListPoolsHostsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnsureWarmPool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.ControllerAPI/EnsureWarmPool',
            api__pb2.EnsureWarmPoolReq.SerializeToString,
            api__pb2.EnsureWarmPoolResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Acquire(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.ControllerAPI/Acquire',
            api__pb2.AcquireReq.SerializeToString,
            api__pb2.AcquireResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Release(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.ControllerAPI/Release',
            api__pb2.ReleaseReq.SerializeToString,
            api__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Exec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.ControllerAPI/Exec',
            api__pb2.ExecReq.SerializeToString,
            api__pb2.ExecResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.ControllerAPI/Health',
            api__pb2.Empty.SerializeToString,
            api__pb2.HealthResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Fork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.ControllerAPI/Fork',
            api__pb2.ForkReq.SerializeToString,
            api__pb2.ForkResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HostdAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReportInventory = channel.unary_unary(
                '/devbox.HostdAPI/ReportInventory',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.InventoryResp.FromString,
                _registered_method=True)
        self.BindGpuToVfio = channel.unary_unary(
                '/devbox.HostdAPI/BindGpuToVfio',
                request_serializer=api__pb2.GpuBDF.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                _registered_method=True)
        self.GpuReset = channel.unary_unary(
                '/devbox.HostdAPI/GpuReset',
                request_serializer=api__pb2.GpuBDF.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                _registered_method=True)
        self.SpawnWarm = channel.unary_unary(
                '/devbox.HostdAPI/SpawnWarm',
                request_serializer=api__pb2.HostSpawnWarmReq.SerializeToString,
                response_deserializer=api__pb2.HostSpawnWarmResp.FromString,
                _registered_method=True)
        self.AcquireWarm = channel.unary_unary(
                '/devbox.HostdAPI/AcquireWarm',
                request_serializer=api__pb2.HostAcquireWarmReq.SerializeToString,
                response_deserializer=api__pb2.HostAcquireWarmResp.FromString,
                _registered_method=True)
        self.FastRestore = channel.unary_unary(
                '/devbox.HostdAPI/FastRestore',
                request_serializer=api__pb2.HostFastRestoreReq.SerializeToString,
                response_deserializer=api__pb2.HostFastRestoreResp.FromString,
                _registered_method=True)
        self.Unpause = channel.unary_unary(
                '/devbox.HostdAPI/Unpause',
                request_serializer=api__pb2.VMId.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                _registered_method=True)
        self.Pause = channel.unary_unary(
                '/devbox.HostdAPI/Pause',
                request_serializer=api__pb2.VMId.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                _registered_method=True)
        self.Destroy = channel.unary_unary(
                '/devbox.HostdAPI/Destroy',
                request_serializer=api__pb2.VMId.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                _registered_method=True)
        self.Exec = channel.unary_unary(
                '/devbox.HostdAPI/Exec',
                request_serializer=api__pb2.HostExecReq.SerializeToString,
                response_deserializer=api__pb2.ExecResp.FromString,
                _registered_method=True)
        self.GetOverlays = channel.unary_unary(
                '/devbox.HostdAPI/GetOverlays',
                request_serializer=api__pb2.OverlayReq.SerializeToString,
                response_deserializer=api__pb2.OverlayResp.FromString,
                _registered_method=True)


class HostdAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReportInventory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BindGpuToVfio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GpuReset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpawnWarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcquireWarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FastRestore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unpause(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pause(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Destroy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOverlays(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HostdAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReportInventory': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportInventory,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.InventoryResp.SerializeToString,
            ),
            'BindGpuToVfio': grpc.unary_unary_rpc_method_handler(
                    servicer.BindGpuToVfio,
                    request_deserializer=api__pb2.GpuBDF.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'GpuReset': grpc.unary_unary_rpc_method_handler(
                    servicer.GpuReset,
                    request_deserializer=api__pb2.GpuBDF.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'SpawnWarm': grpc.unary_unary_rpc_method_handler(
                    servicer.SpawnWarm,
                    request_deserializer=api__pb2.HostSpawnWarmReq.FromString,
                    response_serializer=api__pb2.HostSpawnWarmResp.SerializeToString,
            ),
            'AcquireWarm': grpc.unary_unary_rpc_method_handler(
                    servicer.AcquireWarm,
                    request_deserializer=api__pb2.HostAcquireWarmReq.FromString,
                    response_serializer=api__pb2.HostAcquireWarmResp.SerializeToString,
            ),
            'FastRestore': grpc.unary_unary_rpc_method_handler(
                    servicer.FastRestore,
                    request_deserializer=api__pb2.HostFastRestoreReq.FromString,
                    response_serializer=api__pb2.HostFastRestoreResp.SerializeToString,
            ),
            'Unpause': grpc.unary_unary_rpc_method_handler(
                    servicer.Unpause,
                    request_deserializer=api__pb2.VMId.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'Pause': grpc.unary_unary_rpc_method_handler(
                    servicer.Pause,
                    request_deserializer=api__pb2.VMId.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'Destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.Destroy,
                    request_deserializer=api__pb2.VMId.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'Exec': grpc.unary_unary_rpc_method_handler(
                    servicer.Exec,
                    request_deserializer=api__pb2.HostExecReq.FromString,
                    response_serializer=api__pb2.ExecResp.SerializeToString,
            ),
            'GetOverlays': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOverlays,
                    request_deserializer=api__pb2.OverlayReq.FromString,
                    response_serializer=api__pb2.OverlayResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'devbox.HostdAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('devbox.HostdAPI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HostdAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReportInventory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/ReportInventory',
            api__pb2.Empty.SerializeToString,
            api__pb2.InventoryResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BindGpuToVfio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/BindGpuToVfio',
            api__pb2.GpuBDF.SerializeToString,
            api__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GpuReset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/GpuReset',
            api__pb2.GpuBDF.SerializeToString,
            api__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpawnWarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/SpawnWarm',
            api__pb2.HostSpawnWarmReq.SerializeToString,
            api__pb2.HostSpawnWarmResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcquireWarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/AcquireWarm',
            api__pb2.HostAcquireWarmReq.SerializeToString,
            api__pb2.HostAcquireWarmResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FastRestore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/FastRestore',
            api__pb2.HostFastRestoreReq.SerializeToString,
            api__pb2.HostFastRestoreResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Unpause(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/Unpause',
            api__pb2.VMId.SerializeToString,
            api__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Pause(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/Pause',
            api__pb2.VMId.SerializeToString,
            api__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/Destroy',
            api__pb2.VMId.SerializeToString,
            api__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Exec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/Exec',
            api__pb2.HostExecReq.SerializeToString,
            api__pb2.ExecResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOverlays(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.HostdAPI/GetOverlays',
            api__pb2.OverlayReq.SerializeToString,
            api__pb2.OverlayResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AgentAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SelfTestGpu = channel.unary_unary(
                '/devbox.AgentAPI/SelfTestGpu',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.HealthResp.FromString,
                _registered_method=True)
        self.Exec = channel.unary_unary(
                '/devbox.AgentAPI/Exec',
                request_serializer=api__pb2.HostExecReq.SerializeToString,
                response_deserializer=api__pb2.ExecResp.FromString,
                _registered_method=True)
        self.TeardownCleanup = channel.unary_unary(
                '/devbox.AgentAPI/TeardownCleanup',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                _registered_method=True)


class AgentAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SelfTestGpu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TeardownCleanup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SelfTestGpu': grpc.unary_unary_rpc_method_handler(
                    servicer.SelfTestGpu,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.HealthResp.SerializeToString,
            ),
            'Exec': grpc.unary_unary_rpc_method_handler(
                    servicer.Exec,
                    request_deserializer=api__pb2.HostExecReq.FromString,
                    response_serializer=api__pb2.ExecResp.SerializeToString,
            ),
            'TeardownCleanup': grpc.unary_unary_rpc_method_handler(
                    servicer.TeardownCleanup,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'devbox.AgentAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('devbox.AgentAPI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SelfTestGpu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.AgentAPI/SelfTestGpu',
            api__pb2.Empty.SerializeToString,
            api__pb2.HealthResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Exec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.AgentAPI/Exec',
            api__pb2.HostExecReq.SerializeToString,
            api__pb2.ExecResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TeardownCleanup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devbox.AgentAPI/TeardownCleanup',
            api__pb2.Empty.SerializeToString,
            api__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
